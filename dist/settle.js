// Generated by CoffeeScript 1.10.0
(function() {
  var getFirstKey, keys, ref, settle, stateOf,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref = require('./utils'), keys = ref.keys, getFirstKey = ref.getFirstKey, stateOf = ref.stateOf;

  module.exports = settle = function(rule, data, _target) {
    var res;
    res = (function() {
      var i, key, len, message, ref1;
      switch (rule.func) {
        case '$typeof':
          if (rule.val === 'array') {
            res = Array.isArray(data);
          } else {
            res = typeof data === rule.val;
          }
          message = "type of " + _target + " " + (stateOf(res)) + " '" + rule.val + "'";
          return [res, message];
        case '$length':
          if (typeof rule.val === 'object') {
            rule.func = getFirstKey(rule.val);
            rule.val = rule.val[rule.func];
            return settle(rule, (keys(data)).length, _target + ".length");
          }
          if (typeof data === 'object') {
            data = keys(data);
          }
          res = data.length === rule.val;
          data = data.length;
          message = "length of " + _target + " " + (stateOf(res)) + " " + rule.val;
          return [res, message];
        case '$gt':
          res = data > rule.val;
          message = _target + " " + (stateOf(res)) + " greater than " + rule.val;
          rule.val = "greater than " + rule.val;
          return [res, message];
        case '$gte':
          res = data >= rule.val;
          message = _target + " " + (stateOf(res)) + " greater than equal " + rule.val;
          rule.val = "greater than equal " + rule.val;
          return [res, message];
        case '$lt':
          res = data < rule.val;
          message = _target + " " + (stateOf(res)) + " less than " + rule.val;
          rule.val = "less than " + rule.val;
          return [res, message];
        case '$lte':
          res = data <= rule.val;
          message = _target + " " + (stateOf(res)) + " less than or equal " + rule.val;
          rule.val = "less than equal " + rule.val;
          return [res, message];
        case '$keys':
          if (typeof data !== 'object') {
            return [false, "key '" + key + "' is not an object"];
          }
          ref1 = keys(data);
          for (i = 0, len = ref1.length; i < len; i++) {
            key = ref1[i];
            if (indexOf.call(rule.val, key) < 0) {
              data = key;
              return [false, "key '" + key + "' of " + _target + " is not allowed"];
            }
          }
          return [true, "all keys of " + _target + " are allowed"];
        case '$eq':
          res = data === rule.val;
          message = _target + " " + (stateOf(res)) + " equal to " + rule.val;
          rule.val = "" + rule.val;
          return [res, message];
        case '$in':
          res = indexOf.call(rule.val, data) >= 0;
          message = _target + " " + (stateOf(res)) + " valid";
          rule.val = "" + rule.val;
          return [res, message];
        default:
          if (data === rule.val) {
            return [true, _target + " is valid"];
          }
          if (indexOf.call(rule.val, data) >= 0) {
            return [true, _target + " is described in " + rule.val];
          }
          return [false, _target + " is not valid"];
      }
    })();
    res.push(data);
    return res;
  };

}).call(this);
